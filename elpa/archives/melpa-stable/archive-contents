
(1 (yasnippet . [(0 8 0) nil "Yet another snippet extension for Emacs." tar]) (yagist . [(0 8 9) ((json (1 2 0))) "Yet Another Emacs integration for gist.github.com" single]) (xterm-color . [(1 0) nil "ANSI & XTERM 256 color support" single]) (writeroom-mode . [(2 3) nil "Minor mode for distraction-free writing" tar]) (window-numbering . [(1 1 2) nil "No description available." single]) (whitespace-cleanup-mode . [(0 8) nil "Intelligently call whitespace-cleanup on save" single]) (weechat . [(0 2) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar]) (wcheck-mode . [(2013 6 25) nil "General interface for text checkers" single]) (wacspace . [(0 4) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" single]) (vcomp . [(0 3 1) nil "compare version strings" single]) (unfill . [(0 1) nil "The inverse of fill-paragraph and fill-region" single]) (tumble . [(1 5) nil "an Tumblr mode for Emacs" single]) (ttrss . [(1 7 5) ((emacs (23 1))) "Tiny Tiny RSS elisp bindings" single]) (thrift . [(0 9 1) nil "No description available." single]) (test-case-mode . [(0 1 9) nil "unit test front-end" single]) (tern-auto-complete . [(0 5 0) ((tern (0 0 1)) (auto-complete (1 4)) (emacs (24))) "Tern Completion by auto-complete.el" single]) (tern . [(0 5 0) ((json (1 2)) (emacs (24))) "Tern-powered JavaScript integration" single]) (tagedit . [(1 4 0) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single]) (svg-mode-line-themes . [(0 1 1) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar]) (suomalainen-kalenteri . [(2013 4 18) nil "Finnish holidays for Emacs calendar." single]) (subshell-proc . [(0 1) nil "Functions for working with comints" single]) (stumpwm-mode . [(0 9 8) nil "special lisp mode for evaluating code into running stumpwm" single]) (stripe-buffer . [(0 2 2) ((cl-lib (1 0))) "Use a different background for even and odd lines" single]) (string-edit . [(0 1 0) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single]) (starter-kit-ruby . [(2 0 3) ((inf-ruby (2 2 1)) (starter-kit (2 0 1))) "Saner defaults and goodies for Ruby" single]) (starter-kit-perl . [(2 0 3) nil "Some helpful Perl code" single]) (starter-kit-lisp . [(2 0 3) ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) "Saner defaults and goodies for lisp languages" single]) (starter-kit-js . [(2 0 3) ((starter-kit (2 0 1))) "Saner defaults and goodies for Javascript" single]) (starter-kit-eshell . [(2 0 3) nil "Saner defaults and goodies: eshell tweaks" single]) (starter-kit-bindings . [(2 0 3) ((starter-kit (2 0 2))) "Saner defaults and goodies: bindings" single]) (starter-kit . [(2 0 3) ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 1)) (ido-ubiquitous (0 3)) (magit (0 8 1))) "Saner defaults and goodies." tar]) (smex . [(3 0) nil "M-x interface with Ido-style fuzzy matching." single]) (smartscan . [(0 2) nil "Jumps between other symbols found at point" single]) (smartrep . [(0 0 3) nil "Support sequential operation which omitted prefix keys." single]) (smart-mode-line . [(2 4) ((emacs (24 3)) (dash (2 2 0))) "A color coded smart mode-line." single]) (slime-ritz . [(0 6 0) nil "slime extensions for ritz" single]) (slim-mode . [(1 1) nil "Major mode for editing Slim files" single]) (slamhound . [(1 5 3) nil "Rip Clojure namespaces apart and rebuild them." single]) (skewer-mode . [(1 6 0) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar]) (skewer-less . [(0 2) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single]) (skeletor . [(1 2) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar]) (simplezen . [(0 1 1) nil "A simple subset of zencoding-mode for Emacs." single]) (simple-httpd . [(1 4 5) ((cl-lib (0 3))) "pure elisp HTTP server" single]) (shell-pop . [(0 3) nil "helps you to use shell easily on Emacs. Only one key action to work." single]) (shampoo . [(0 0 1) nil "Shampoo, a remote Smalltalk developemnt" tar]) (session . [(2 3 1) nil "use variables, registers and buffer places across sessions" single]) (scss-mode . [(0 5 0) nil "Major mode for editing SCSS files" single]) (scala-mode . [(2 10 0 13 6) nil "No description available." tar]) (save-sexp . [(0 2 0) nil "save variables in files using setter forms like `setq'" tar]) (sackspace . [(0 8 2) nil "A better backspace" single]) (s . [(1 9 0) nil "The long lost Emacs string manipulation library." single]) (rvm . [(1 2 0) nil "Emacs integration for rvm" single]) (rust-mode . [(0 9) nil "A major emacs mode for editing Rust source code" single]) (ruby-test-mode . [(1 0) nil "Minor mode for Behaviour and Test Driven" single]) (ruby-hash-syntax . [(0 3) nil "Toggle ruby hash syntax between classic and 1.9 styles" single]) (ruby-compilation . [(2 10) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single]) (rnc-mode . [(1 0 6) nil "A major mode for editing RELAX NG Compact syntax." single]) (rinari . [(2 10) ((ruby-mode (1 0)) (inf-ruby (2 2 1)) (ruby-compilation (0 8)) (jump (2 0))) "Rinari Is Not A Rails IDE" single]) (relax . [(0 2) ((json (1 2))) "For browsing and interacting with CouchDB" single]) (rainbow-delimiters . [(1 3 5) nil "Highlight nested parens, brackets, braces a different color at each depth." single]) (quickrun . [(2 0 0) nil "Run commands quickly" single]) (puppet-mode . [(0 3) ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) "Major mode for Puppet manifests" single]) (project-persist . [(0 3) nil "A minor mode to allow loading and saving of project settings." tar]) (project-explorer . [(0 13 1) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single]) (processing-mode . [(1 0) ((yasnippet (0 8 0))) "Major mode for Processing 2.0" single]) (pretty-mode . [(2 0 2) nil "Redisplay parts of the buffer as pretty symbols." single]) (powerline . [(2 2) ((cl-lib (0 2))) "Rewrite of Powerline" tar]) (plenv . [(0 32) nil "A plenv wrapper for Emacs" single]) (pkgbuild-mode . [(0 11) nil "Interface to the ArchLinux package manager" single]) (pkg-info . [(0 5) ((dash (1 6 0)) (epl (0 4))) "Information about packages" single]) (ph . [(0 1 0) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar]) (perspective . [(1 9) nil "switch between named \"perspectives\" of the editor" single]) (pcache . [(0 2 4) ((eieio (1 3))) "persistent caching for Emacs" single]) (parenface . [(1 1) nil "Provide a face for parens in lisp modes." single]) (paren-face . [(0 1 0) nil "a face for parentheses in lisp modes" single]) (paredit-everywhere . [(0 3) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single]) (pandoc-mode . [(2 5 4) nil "Minor mode for interacting with Pandoc" tar]) (pallet . [(0 6) ((cask (0 6))) "A package management tool for Emacs, using Cask." tar]) (page-break-lines . [(0 9) nil "Display ugly ^L page breaks as tidy horizontal lines" single]) (packed . [(0 3 4) ((cl-lib (0 2)) (magit (1 1 1))) "Package manager agnostic Emacs Lisp package utilities" tar]) (osx-plist . [(1 0 0) nil "Apple plist file parser" single]) (osx-location . [(0 1) nil "Watch and respond to changes in geographical location on OS X" tar]) (orglink . [(0 2 1) ((dash (1 3 2)) (org (8 0))) "use Org Mode links in other modes" single]) (org-trello . [(0 3 5) ((dash (2 5 0)) (request (0 2 0)) (elnode (0 9 9 7 6)) (esxml (0 3 0)) (s (1 7 0)) (kv (0 0 19))) "Minor mode to synchronize org-mode buffer and trello board" tar]) (org-toodledo . [(2 15) nil "Toodledo integration for Emacs Org mode" tar]) (org-pomodoro . [(1 3 1) ((alert (0 5 10))) "Pomodoro implementation for org-mode." tar]) (org-mac-iCal . [(7 9 3 5) nil "Imports events from iCal.app to the Emacs diary" single]) (org-elisp-help . [(0 1 0) ((cl-lib (0 2)) (org (8 0))) "org links to emacs-lisp documentation" single]) (org-bullets . [(0 2 2) nil "Show bullets in org-mode as UTF-8 characters" single]) (org-agenda-property . [(1 3 1) ((emacs (24 2))) "Display org properties in the agenda buffer." single]) (object-registry . [(1 2 0) ((cl-lib (0 2))) "track data items by various instance slots" single]) (ob-sml . [(0 2) ((sml-mode (6 4))) "org-babel functions for template evaluation" single]) (o-blog . [(1 2) nil "Org-blog exporter" tar]) (number-font-lock-mode . [(0 1 6) ((emacs (24))) "Syntax highlighting of numeric literals" single]) (nsis-mode . [(0 43) nil "NSIS-mode" single]) (nrepl-ritz . [(0 6 0) ((nrepl (0 1 5))) "nrepl extensions for ritz" single]) (notmuch . [(0 17) nil "No description available." tar]) (nodejs-repl . [(0 0 2) nil "Run Node.js REPL" single]) (ncl-mode . [(0 91) nil "No description available." tar]) (multiple-cursors . [(1 3 0) nil "Multiple cursors for Emacs." tar]) (multi-web-mode . [(0 2 1) nil "multiple major mode support for web editing" tar]) (morlock . [(0 4 0) nil "more font-lock keywords for elisp" single]) (mode-line-debug . [(1 2 0) nil "show status of `debug-on-error' in the mode-line" single]) (mode-icons . [(0 1 0) nil "Show icons for modes" tar]) (mocker . [(0 3 0) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single]) (mmm-mode . [(0 5 1) nil "Allow Multiple Major Modes in a buffer" tar]) (mentor . [(0 1) nil "Control rtorrent from GNU Emacs" tar]) (mc-extras . [(1 0 1) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar]) (map-regexp . [(0 3 0) ((cl-lib (0 2))) "map over matches of a regular expression" single]) (map-progress . [(0 5 0) nil "mapping macros that report progress" single]) (malabar-mode . [(20140303 946) ((fringe-helper (1 0 1))) "A better Java mode for Emacs" tar]) (makey . [(0 3) ((cl-lib (0 2))) "interactive commandline mode" single]) (magit-topgit . [(1 2 0) nil "topgit plug-in for Magit" single]) (magit-svn . [(1 2 0) nil "git-svn plug-in for Magit" single]) (magit-stgit . [(1 2 0) nil "StGit plug-in for Magit" single]) (magit-push-remote . [(0 5 0) ((magit (1 3 0))) "push remote support for Magit" single]) (magit-find-file . [(1 0 4) ((magit (1 2 0))) "completing-read over all files in Git" single]) (magit . [(1 2 0) nil "Control Git from Emacs." tar]) (macrostep . [(0 3) nil "interactive macro stepper for Emacs Lisp" single]) (macro-math . [(1 0) nil "in-buffer mathematical operations" single]) (logalimacs . [(1 0 0) nil "Front-end to logaling-command for Ruby gems" single]) (log4j-mode . [(1 3) nil "major mode for viewing log files" single]) (lispyscript-mode . [(0 3 5) nil "Major mode for LispyScript code." single]) (lispy . [(0 9 0) ((helm (1 5 3)) (ace-jump-mode (2 0)) (s (1 4 0)) (noflet (0 0 10)) (multiple-cursors (1 3 0)) (iedit (0 97))) "vi-like Paredit" tar]) (less-css-mode . [(0 18) nil "Major mode for editing LESS CSS files (lesscss.org)" single]) (latex-extra . [(1 7 4) ((auctex (11 86 1))) "Adds several useful functionalities to LaTeX-mode." single]) (langtool . [(1 2 1) nil "Grammer check utility using LanguageTool" single]) (know-your-http-well . [(0 0 2) nil "collection of HTTP packages" tar]) (kivy-mode . [(1 8 0) nil "Emacs major mode for editing Kivy files" single]) (killer . [(0 2 2) nil "kill and delete text" single]) (kill-ring-search . [(1 1) nil "incremental search for the kill ring" single]) (keymap-utils . [(0 4 4) ((cl-lib (0 2))) "Keymap utilities" tar]) (keydef . [(1 15) nil "a simpler way to define keys, with kbd syntax" single]) (keychain-environment . [(2 0 1) nil "load keychain environment variables" single]) (key-combo . [(1 2) nil "map key sequence to commands" tar]) (jump . [(2 3) ((findr (0 7)) (inflections (1 1))) "build functions which contextually jump between files" single]) (jsx-mode . [(0 1 10) nil "major mode for JSX" single]) (js2-refactor . [(0 6 1) ((js2-mode (20101228)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (20130218))) "A JavaScript refactoring library for emacs." tar]) (js2-mode . [(20140114) ((emacs (24 1))) "Improved JavaScript editing mode" tar]) (jabber . [(0 8 92) nil "A Jabber client for Emacs." tar]) (ix . [(0 7) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single]) (insert-shebang . [(0 9 3) nil "Insert shebang line automatically." single]) (inline-crypt . [(0 1 4) nil "Simple inline encryption via openssl" tar]) (initsplit . [(1 6) nil "No description available." single]) (inflections . [(2 3) nil "convert english words between singular and plural" single]) (inf-ruby . [(2 2 4) nil "Run a ruby process in a buffer" single]) (import-popwin . [(0 7) ((popwin (0 6)) (cl-lib (0 5))) "popwin buffer near by import statements with popwin" single]) (idle-highlight-mode . [(1 1 3) nil "highlight the word the point is on" single]) (ibuffer-vc . [(0 7) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single]) (hyde . [(0 2) nil "No description available." tar]) (httpcode . [(0 1) nil "explains the meaning of an HTTP status code" single]) (hl-todo . [(1 3 1) nil "highlight TODO keywords" single]) (hl-sexp . [(1 0 0) nil "highlight the current sexp" single]) (hl-sentence . [(3) nil "highlight a sentence based on customizable face" single]) (historyf . [(0 0 8) nil "file history library like browser" single]) (hippie-expand-slime . [(0 1) nil "Hook slime's completion into hippie-expand" single]) (highlight-symbol . [(1 2) nil "automatic and manual symbol highlighting" single]) (highlight-parentheses . [(1 0 2) nil "highlight surrounding parentheses" tar]) (helm-themes . [(0 3) ((helm (1 0))) "Color theme selection with helm interface" single]) (helm-spaces . [(0 2) ((helm (1 0)) (spaces (0 1 0))) "helm sources for spaces" single]) (helm-pydoc . [(0 5) ((helm (1 0)) (cl-lib (0 5))) "pydoc with helm interface" tar]) (helm-package . [(0 2) ((helm (1 0)) (cl-lib (0 3))) "Listing ELPA packages with helm interface" single]) (helm-open-github . [(0 8) ((helm (1 0)) (gh (1 0)) (cl-lib (0 5))) "Utilities of Opening Github Page" single]) (helm-gtags . [(1 2 5) ((helm (1 5 6)) (cl-lib (0 5))) "GNU GLOBAL helm interface" single]) (helm-github-stars . [(1 1 1) ((helm (1 5 5))) "Helm integration for your starred repositories on github" single]) (helm-descbinds . [(1 7 1) nil "Yet Another `describe-bindings' with `helm'." single]) (helm-ag . [(0 15) ((helm (1 5 6)) (cl-lib (0 5))) "the silver search with helm interface" single]) (helm-ack . [(0 9) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single]) (header-button . [(0 3 0) nil "clickable buttons in header lines" single]) (haskell-mode . [(2 -3 9 -3 1) nil "A Haskell editing mode" tar]) (haml-mode . [(3 1 5) ((ruby-mode (1 0))) "Major mode for editing Haml files" single]) (ham-mode . [(1 1 1) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown." single]) (grapnel . [(0 5 3) nil "HTTP request lib with flexible callback dispatch" single]) (graphene . [(1 0) ((auto-complete (20130330)) (smartparens (20130329)) (multi-web-mode (20130205)) (smex (20120915)) (sr-speedbar (20130309)) (project-persist (20130309)) (exec-path-from-shell (20121108))) "A set of defaults targeted at GUI text editor diaspora." tar]) (google-this . [(1 8) nil "A set of functions and bindings to google under point." single]) (golden-ratio . [(0 0 4) nil "Automatic resizing of Emacs windows to the golden ratio" single]) (go-eldoc . [(0 14) ((go-mode (0)) (cl-lib (0 5))) "eldoc for go-mode" single]) (go-direx . [(0 2) ((direx (0 1 -3)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single]) (gnuplot . [(0 6 1) nil "No description available." tar]) (gmail-message-mode . [(1 3 1) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single]) (git-messenger . [(0 8) ((popup (0 5 0))) "Pop up last commit information of current line" single]) (git-gutter-fringe . [(0 13) ((git-gutter (0 42)) (fringe-helper (0 1 1))) "Fringe version of git-gutter.el" single]) (git-gutter-fringe+ . [(0 1) ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) "Fringe version of git-gutter+.el" single]) (git-gutter . [(0 55) nil "Port of Sublime Text plugin GitGutter" single]) (git-gutter+ . [(0 2) nil "Manage Git hunks straight from the buffer" single]) (git-auto-commit-mode . [(4 2 2) nil "Emacs Minor mode to automatically commit and push" single]) (gist . [(1 0 3) ((eieio (1 3)) (gh (0 6 0)) (tabulated-list (0))) "Emacs integration for gist.github.com" single]) (ggtags . [(0 8 0) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single]) (geiser . [(0 5) nil "GNU Emacs and Scheme talk to each other" tar]) (gather . [(1 0 5) nil "Gather string in buffer." single]) (fwb-cmds . [(0 4 0) nil "misc frame, window and buffer commands" single]) (full-ack . [(1 0) nil "a front-end for ack" tar]) (fuel . [(0 96) nil "No description available." tar]) (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" tar]) (frame-restore . [(0 4) ((dash (1 2)) (f (0 11)) (emacs (24 1))) "Restore Emacs frame" single]) (fountain-mode . [(0 7) nil "No description available." single]) (fold-this . [(0 2 0) nil "Just fold this region please" single]) (fold-dwim . [(1 2) nil "No description available." single]) (fm . [(1 0) nil "follow mode for compilation/output buffers" single]) (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single]) (flymake-sass . [(0 6) ((flymake-easy (0 1))) "Flymake handler for sass files" single]) (flymake-ruby . [(0 8) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single]) (flymake-python-pyflakes . [(0 9) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single]) (flymake-php . [(0 5) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single]) (flymake-perlcritic . [(1 0 3) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar]) (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single]) (flymake-jslint . [(0 23) nil "Flymake support for javascript using jslint" single]) (flymake-hlint . [(0 2) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single]) (flymake-haskell-multi . [(0 3) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar]) (flymake-haml . [(0 8) ((flymake-easy (0 1))) "A flymake handler for haml files" single]) (flymake-gjshint . [(0 0 6) nil "A flymake handler for javascript using both jshint and gjslint" single]) (flymake-easy . [(0 9) nil "Helpers for easily building flymake checkers" single]) (flymake-css . [(0 3) ((flymake-easy (0 1))) "Flymake support for css using csslint" single]) (flymake-coffee . [(0 12) ((flymake-easy (0 1))) "A flymake handler for coffee script" single]) (flycheck-ledger . [(0 3) ((flycheck (0 15))) "Flycheck integration for ledger files" single]) (flycheck-hdevtools . [(0 1) ((flycheck (0 15))) "A flycheck checker for Haskell using hdevtools" single]) (flycheck-haskell . [(0 1) ((flycheck (0 16)) (haskell-mode (13 7)) (dash (2 4 0)) (f (0 11 0))) "Flycheck: Haskell configuration" tar]) (flycheck-color-mode-line . [(0 2) ((flycheck (0 13)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single]) (flycheck-cask . [(0 1) ((flycheck (0 14)) (dash (2 0 0)) (f (0 6 0))) "Cask support in Flycheck" single]) (flycheck . [(0 18) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (pkg-info (0 4)) (cl-lib (0 3)) (emacs (24 1))) "On-the-fly syntax checking (Flymake done right)" tar]) (flx-ido . [(0 2) nil "flx integration for ido" single]) (flx . [(0 2) nil "fuzzy matching with good sorting" single]) (fiplr . [(0 2 4) ((grizzl (0 1 0))) "Fuzzy Search for Files in Projects" tar]) (find-file-in-project . [(3 2) nil "Find files in a project quickly." single]) (fasm-mode . [(0 1 8) nil "Fasm major mode" single]) (expand-region . [(0 10 0) nil "Increase selected region by semantic units." tar]) (exec-path-from-shell . [(1 7) nil "Get environment variables such as $PATH from the shell" single]) (evil-numbers . [(0 3) nil "increment/decrement numbers like in vim" single]) (evil-leader . [(0 4 2) ((evil (0))) "let there be <leader>" single]) (evil . [(1 0 8) ((undo-tree (0 6 3)) (goto-last-change (1 2))) "Extensible Vi layer for Emacs." tar]) (ercn . [(1 0 2) nil "Flexible ERC notifications" single]) (erc-hl-nicks . [(1 3 0) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single]) (erc-crypt . [(1 0) nil "Symmetric Encryption for ERC" single]) (epl . [(0 7) ((cl-lib (0 3))) "Emacs Package Library" single]) (epc . [(0 1 0) ((concurrent (0 3 1)) (ctable (0 1 0))) "A RPC stack for the Emacs Lisp" tar]) (enotify . [(0 1 3) nil "No description available." tar]) (emmet-mode . [(1 0 2) nil "Unofficial Emmet's support for emacs" single]) (emamux . [(0 6) ((cl-lib (0 5))) "Interact with tmux" single]) (emacs-setup . [(1 0) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar]) (emacs-eclim . [(0 2) nil "No description available." tar]) (elx . [(0 9 6) ((emacs (24 3 50))) "extract information from Emacs Lisp libraries" single]) (elpa-audit . [(0 4) nil "Handy functions for inspecting and comparing package archives" single]) (elmine . [(0 3) nil "No description available." single]) (elisp-slime-nav . [(0 7) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single]) (elfeed-web . [(1 1 0) ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) "web interface to Elfeed" tar]) (elfeed . [(1 1 0) ((emacs (24 1))) "an Emacs Atom/RSS feed reader" tar]) (el-x . [(0 3 0) nil "main entry point for el-x package" tar]) (el-spice . [(0 2 2) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar]) (egison-mode . [(3 3 3) nil "Egison editing mode" single]) (edit-list . [(0 3) nil "edit a single list" single]) (ebib . [(1 15 6) nil "a BibTeX database manager" tar]) (e2wm-R . [(0 4) ((e2wm (1 2))) "some e2wm plugin and perspective for GNU R" single]) (drupal-spell . [(0 2 2) nil "Aspell extra dictionary for Drupal" tar]) (drupal-mode . [(0 5 0) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar]) (dispass . [(1 1 2) nil "Emacs wrapper for DisPass" single]) (discover . [(0 3) ((makey (0 3))) "discover more of Emacs" single]) (dired-efap . [(0 8) nil "Edit Filename At Point in a dired buffer" single]) (diminish . [(0 44) nil "Diminished modes are minor modes with no modeline display" single]) (dim-autoload . [(1 1 2) nil "dim complete autoload cookie lines" single]) (desktop-registry . [(1 2 0) nil "Keep a central registry of desktop files" single]) (dedicated . [(1 0 0) nil "A very simple minor mode for dedicated buffers" single]) (dash-functional . [(2 6 0) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single]) (dash . [(2 6 0) nil "A modern list library for Emacs" single]) (dart-mode . [(0 9) nil "Major mode for editing Dart files" single]) (d-mode . [(2 0 6) nil "D Programming Language mode for (X)Emacs" single]) (cython-mode . [(0 20 2 2) nil "Major mode for editing Cython files" single]) (ctags-update . [(0 2 0) nil "(auto) update TAGS in parent directory using exuberant-ctags" single]) (ctable . [(0 1 2) nil "Table component for Emacs Lisp" single]) (cperl-mode . [(6 2) nil "Perl code editing commands for Emacs" single]) (conkeror-minor-mode . [(1 5 3) nil "Mode for editing conkeror javascript files." single]) (company . [(0 7 3) nil "Modular in-buffer completion framework" tar]) (colorsarenice-theme . [(1 0 11) ((emacs (24))) "A color theme." tar]) (color-theme-sanityinc-tomorrow . [(1 10) nil "A version of Chris Kempson's various Tomorrow themes" tar]) (color-theme-sanityinc-solarized . [(2 25) nil "A version of Ethan Schoonover's Solarized themes" tar]) (clojure-test-mode . [(2 1 1) ((clojure-mode (1 7)) (cider (0 4 0))) "Minor mode for Clojure tests" single]) (clojure-mode . [(2 1 1) nil "Major mode for Clojure code" single]) (clj-refactor . [(0 12 0) ((s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (22)) (multiple-cursors (1 2 2))) "A collection of clojure refactoring functions" single]) (cl-lib-highlight . [(1 0 0) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single]) (charmap . [(0 0 1) nil "Unicode table for Emacs" single]) (cfengine-code-style . [(3 6 0 2 2) nil "C code style for CFEngine project." single]) (bug-reference-github . [(0 2 0) nil "Automatically set `bug-reference-url-format' in Github repositories." single]) (bbdb-vcard . [(0 3) nil "vCard import/export for BBDB" tar]) (autopair . [(0 6 1) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single]) (auto-dictionary . [(1 1) nil "automatic dictionary switcher for flyspell" tar]) (auto-compile . [(1 1 0) ((cl-lib (0 2)) (packed (0 3 4))) "automatically compile Emacs Lisp libraries" single]) (anzu . [(0 33) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single]) (angular-snippets . [(0 2 3) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar]) (ag . [(0 42) nil "A front-end for ag ('the silver searcher'), the C ack replacement." single]) (aes . [(0 5) nil "Implementation of AES" single]) (actionscript-mode . [(7 2 2) nil "A simple mode for editing Actionscript 3 files" single]) (ack-menu . [(0 2 3) nil "No description available." tar]) (ac-slime . [(0 5) nil "An auto-complete source using slime completions" single]) (ac-nrepl . [(0 21) ((cider (0 1)) (auto-complete (1 4))) "auto-complete sources for Clojure using nrepl completions" single]) (ac-ispell . [(0 5) ((auto-complete (1 4))) "ispell completion source for auto-complete" single]) (ac-inf-ruby . [(0 4) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single]) (ac-helm . [(2 1) ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) "Auto Complete with Helm" single]) (ac-etags . [(0 6) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single]))
